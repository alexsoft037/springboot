<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xin.xiaoer.modules.setting.dao.NotificationDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="xin.xiaoer.modules.setting.entity.Notification" id="notificationMap">
        <result property="noteId" column="note_id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="readYn" column="read_yn"/>
        <result property="arrivedYn" column="arrived_yn"/>
        <result property="createAt" column="create_at"/>
    </resultMap>

	<select id="get" resultType="xin.xiaoer.modules.setting.entity.Notification">
		select * from notification where note_id = #{value}
	</select>

	<select id="getList" resultType="xin.xiaoer.modules.setting.entity.Notification">
		select * from notification t <include refid="where_clause" />
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by note_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="getCount" resultType="int">
		select count(*) from notification t  <include refid="where_clause" />
	</select>

    <!-- 搜索数据区域 -->
    <sql id="where_clause">
        <where>
            1=1
            <if test="noteId != null and noteId != ''"> and t.note_id = #{noteId} </if>
    		<if test="noteIdVague != null and noteIdVague != ''"> and t.note_id like concat('%',#{noteIdVague},'%') </if>
            <if test="userId != null and userId != ''"> and t.user_id = #{userId} </if>
    		<if test="userIdVague != null and userIdVague != ''"> and t.user_id like concat('%',#{userIdVague},'%') </if>
            <if test="title != null and title != ''"> and t.title = #{title} </if>
    		<if test="titleVague != null and titleVague != ''"> and t.title like concat('%',#{titleVague},'%') </if>
            <if test="content != null and content != ''"> and t.content = #{content} </if>
    		<if test="contentVague != null and contentVague != ''"> and t.content like concat('%',#{contentVague},'%') </if>
            <if test="readYn != null and readYn != ''"> and t.read_yn = #{readYn} </if>
    		<if test="readYnVague != null and readYnVague != ''"> and t.read_yn like concat('%',#{readYnVague},'%') </if>
            <if test="arrivedYn != null and arrivedYn != ''"> and t.arrived_yn = #{arrivedYn} </if>
    		<if test="arrivedYnVague != null and arrivedYnVague != ''"> and t.arrived_yn like concat('%',#{arrivedYnVague},'%') </if>
            <if test="createAt != null and createAt != ''"> and t.create_at = #{createAt} </if>
    		<if test="createAtVague != null and createAtVague != ''"> and t.create_at like concat('%',#{createAtVague},'%') </if>
        </where>
    </sql>
	 
	<insert id="save" parameterType="xin.xiaoer.modules.setting.entity.Notification" useGeneratedKeys="true" keyProperty="noteId">
		insert into notification
		(
			`user_id`, 
			`title`, 
			`content`, 
			`read_yn`, 
			`arrived_yn`, 
			`create_at`
		)
		values
		(
			#{userId}, 
			#{title}, 
			#{content}, 
			#{readYn}, 
			#{arrivedYn}, 
			NOW()
		)
	</insert>
	 
	<update id="update" parameterType="xin.xiaoer.modules.setting.entity.Notification">
		update notification 
		<set>
			<if test="userId != null">`user_id` = #{userId}, </if>
			<if test="title != null">`title` = #{title}, </if>
			<if test="content != null">`content` = #{content}, </if>
			<if test="readYn != null">`read_yn` = #{readYn}, </if>
			<if test="arrivedYn != null">`arrived_yn` = #{arrivedYn}, </if>
			<if test="createAt != null">`create_at` = NOW()</if>
		</set>
		where note_id = #{noteId}
	</update>
	
	<delete id="delete">
		delete from notification where note_id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from notification where note_id in 
		<foreach item="noteId" collection="array" open="(" separator="," close=")">
			#{noteId}
		</foreach>
	</delete>

</mapper>